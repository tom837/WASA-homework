openapi: '3.0.2'
info:
  title: API Title
  version: '1.0'
  
tags: 
  - name: login
    description: login/signup
  - name: profile
    description: info about my profile or a users profile
  - name: react
    description: anything that shows your reaction to a post (comment, like)
  - name: userInteraction
    description: anything that allows user to interact directl with each other (follow, ban)
    
paths:
  /session:
    post:
      tags: ["login"]
      summary: Logs in the user
      description: |
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              type: string
              pattern: 'ˆ.*?$'
              minLength: 3
              maxLength: 16
        required: true
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
                    
  /user:
  
    get:
      summary: get your stream
      description: |
        See the pictures of users that you are following.
      tags: [profile]
      operationId: getMyStream
      responses:
        '200':
          description: succesfull response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/photo'
        '404':
          description: profile not found
          content:
            appliccation/json:
              schema:
                $ref: '#/components/schemas/error'
    put: 
      summary: change your username
      description: |
        You can change your userame. It has to have a minimum of 3 letters and a maximum of 16
        you can change it as many times as you want.
      tags: [profile]
      operationId: setMyUserName
      requestBody:
        content:
          application/json:
            schema:
              type: string
              pattern: 'ˆ.*?$'
              minLength: 3
              maxLength: 16
        required: true
      responses:
        '200':
          description: username changed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '404':
          description: profile not found
          content:
            appliccation/json:
              schema:
                $ref: '#/components/schemas/error'
  
  /user/{userid}:
    parameters:
      - $ref: '#/components/parameters/users' 
    get:
      summary: get user profile
      description: |
        See all the pictures a user has posted.
        Also the number of photos posted and followers and users they are following
      tags: [profile]
      operationId: getUserProfile
      responses:
        '200':
          description: succesfull response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '404':
          description: user not found
          content:
            appliccation/json:
              schema:
                $ref: '#/components/schemas/error'
                
  /user/{userid}/followers/:
    parameters:
      - $ref: '#/components/parameters/users'
    post:
      summary: follow a user
      description: |
        You will follow this user and there posts will show up on your stream.
      tags: [userInteraction]
      operationId: followUser
      responses:
        '201': 
          description: 'user successfully followed'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '404':
          description: user not found
          content:
            appliccation/json:
              schema:
                $ref: '#/components/schemas/error'
    delete:
      summary: unfollow a user
      description: |
        You can unfollow any user that you have already followed
      tags: [userInteraction]
      operationId: unfollowUser
      responses:
        '200': 
          description: user unfollowed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '404':
          description: user not found
          content:
            appliccation/json:
              schema:
                $ref: '#/components/schemas/error'

  /user/{userid}/banedusers/:
    parameters:
      - $ref: '#/components/parameters/users'
    post:
      summary: ban a user
      description: |
        If you ban a user you will no longer be able to see his photos.
        He will also no longer be able to see your photos.
      tags: [userInteraction]
      operationId: banUser
      responses:
        '201': 
          description: user baned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '404':
          description: user not found
          content:
            appliccation/json:
              schema:
                $ref: '#/components/schemas/error'

    delete:
      summary: unban a user
      description: |
        You can unban any user that you have already baed
      tags: [userInteraction]
      operationId: unbanUser
      responses:
        '200': 
          description: user unbaned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '404':
          description: user not found
          content:
            appliccation/json:
              schema:
                $ref: '#/components/schemas/error'
  /photos:
    post:
      summary: post a new photo
      description: | 
        post a new photo where peope will be able to see that photo,
        like and comment on that photo.
      tags: [profile]
      operationId: uploadPhoto
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/photo'
        required: true 
      responses:
        '201':
          description: photo posted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/photo'

  /photos/{photoId}:  
    parameters:
        - $ref: '#/components/parameters/photo'
    delete:
      summary: delete a photo
      description: | 
        delete a photo from the website. deleting a photo deletes also 
        all it's likes and comments.
      tags: [profile]
      operationId: deletePhoto
      responses:
        '200': 
          description: 'photo deleted successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '404':
          description: post not found
          content:
            appliccation/json:
              schema:
                $ref: '#/components/schemas/error'
  
  /photos/{photoId}/likes/:
    parameters:
      - $ref: '#/components/parameters/photo'

    post:
      summary: like a photo
      description: |
        if you enjoyed a photo you can put a like on it
        to show everyone that you enjoed that post.
        likes can always be removed.
      tags: [react]
      operationId:  likePhoto
      responses:
        '201':
          description: photo liked successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/photo'
        '404':
          description: post not found
          content:
            appliccation/json:
              schema:
                $ref: '#/components/schemas/error'

    delete:
      summary: remove a like from a photo
      description: |
        if you changed your mind about a post
        or liked by accident you can remove any like you put.
      tags: [react]
      operationId: unlikePhoto
      responses:
        '200':
          description: like removed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/photo'
        '404':
          description:  post or like not found
          content:
            appliccation/json:
              schema:
                $ref: '#/components/schemas/error'

  /photos/{photoId}/comments/:
    parameters:
      - $ref: '#/components/parameters/photo'
    post: 
      summary: post a comment under a photo
      description: |
        people can comment on photos and they will be visible to everyone.
      tags: [react]
      operationId: commentPhoto
      requestBody:
        description: you have to provide the content of the comment
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/comments'
      responses:
        '201':
          description: comment posted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/photo'
        '404':
          description: post not found
          content:
            appliccation/json:
              schema:
                $ref: '#/components/schemas/error'
          
    delete:
      summary: delete a comment
      description: | 
        delete a photo from a post. it will no longer be visible to anyone
      tags: [react]
      operationId: uncommentPhoto
      responses:
        '200': 
          description: 'comment deleted successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/photo'
        '404':
          description: post or comment not found
          content:
            appliccation/json:
              schema:
                $ref: '#/components/schemas/error'

components:
  schemas:
    user:
      type: object
      properties:
        username: 
          type: string
          pattern: 'ˆ.*?$'
          minLength: 3
          maxLength: 16
          description: this is the public username everyone will be able to see
        id: 
          type: string
          pattern: '^u[0-9]+$'
          example: u101
          description: this is the unique identifier for users
        email:
          type: string
          format: email
          description: the eamail adresse of the user
        profilePicture:
          type: string 
          format: binary
          description: every user can have a profile picture that will be show with it's user name
    photo:
      type: object
      properties:
        file:
          type: string  
          format: binary  
          description: this is the photo itself
        id: 
          type: string
          pattern: '^p[0-9]+$'
          example: p101
          description: this is the unique identifier for photos
        user:
          $ref: '#/components/schemas/user/properties/id'
          description: every photo is associated to the user that posted it
  
    comments:
      type: object
      properties:
        body:
          type: string
          description: what the comment will say
        id: 
          type: string
          pattern: '^c[0-9]+$'
          example: c101
          description: this is the unique identifier for comments
    error:
      type: object
      properties:
        status:
          type: integer
          description: the satus code
        error:
          type: string
          description: what error accured
        message:
          type: string
          description: the message associated to the error
        path: 
          type: string
          description: the path where the error accured
      
  parameters:
    users:
      name: userid 
      in: path
      required: true
      schema:
        type: object
        properties:
          id: 
            $ref: '/components/schemas/user/properties/id'
    photo:
      name: photoId
      in: path
      required: true
      schema:
        type: object
        properties:
          id: 
            $ref: '#/components/schemas/photo/properties/id'

    comment:
      name: commentid
      in: path
      required: true
      schema:
        type: object
        properties:
          id: 
            $ref: '#/components/schemas/comments/properties/id'

                
                
  securitySchemes:
    bearerAuth:            
      type: http
      scheme: bearer
      bearerFormat: JWT    

security:
  - bearerAuth: []


      

